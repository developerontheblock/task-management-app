{"ast":null,"code":"var _jsxFileName = \"/home/alex/Music/task-management-app/frontend/src/tasks/pages/UpdateTask.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useParams } from 'react-router-dom';\nimport Input from '../../shared/components/FormElements/Input';\nimport Button from '../../shared/components/FormElements/Button';\nimport { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH } from '../../shared/util/validators';\nimport { useForm } from '../../shared/hooks/form-hook';\nimport './TaskForm.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DUMMY_TASKS = [{\n  id: 't1',\n  title: 'new bug 1',\n  description: 'new bug 1 new bug 1',\n  creator: 'u1'\n}, {\n  id: 't2',\n  title: 'new bug 2',\n  description: 'new bug 2 new bug 2',\n  creator: 'u2'\n}];\n\nconst UpdateTask = () => {\n  _s();\n\n  const taskId = useParams().taskId;\n  const identifiedTask = DUMMY_TASKS.find(t => t.id === taskId);\n  const [formState, inputHandler] = useForm({\n    title: {\n      value: identifiedTask.title,\n      isValid: true\n    },\n    description: {\n      value: identifiedTask.description,\n      isValid: true\n    }\n  }, true);\n\n  if (!identifiedTask) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"center\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"task not found!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"task-form\",\n    children: [/*#__PURE__*/_jsxDEV(Input, {\n      id: \"title\",\n      element: \"input\",\n      type: \"text\",\n      label: \"Title\",\n      validators: [VALIDATOR_REQUIRE()],\n      errorText: \"Please enter a valid title.\",\n      onInput: () => {},\n      value: identifiedTask.title,\n      valid: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Input, {\n      id: \"description\",\n      element: \"textarea\",\n      label: \"Description\",\n      validators: [VALIDATOR_MINLENGTH(10)],\n      errorText: \"Please enter a valid description (min. 10 characters).\",\n      onInput: () => {},\n      value: identifiedTask.description,\n      valid: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      type: \"submit\",\n      disabled: true,\n      children: \"Update task\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n};\n\n_s(UpdateTask, \"UT27uF8pXIw/f+PAdn/t1qruH8Q=\", false, function () {\n  return [useParams, useForm];\n});\n\n_c = UpdateTask;\nexport default UpdateTask;\n\nvar _c;\n\n$RefreshReg$(_c, \"UpdateTask\");","map":{"version":3,"sources":["/home/alex/Music/task-management-app/frontend/src/tasks/pages/UpdateTask.js"],"names":["React","useParams","Input","Button","VALIDATOR_REQUIRE","VALIDATOR_MINLENGTH","useForm","DUMMY_TASKS","id","title","description","creator","UpdateTask","taskId","identifiedTask","find","t","formState","inputHandler","value","isValid"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,SAAR,QAAwB,kBAAxB;AAEA,OAAOC,KAAP,MAAkB,4CAAlB;AACA,OAAOC,MAAP,MAAmB,6CAAnB;AACA,SACIC,iBADJ,EAEIC,mBAFJ,QAGO,8BAHP;AAIA,SAAQC,OAAR,QAAsB,8BAAtB;AACA,OAAO,gBAAP;;AAEA,MAAMC,WAAW,GAAG,CAChB;AACIC,EAAAA,EAAE,EAAE,IADR;AAEIC,EAAAA,KAAK,EAAE,WAFX;AAGIC,EAAAA,WAAW,EAAE,qBAHjB;AAIIC,EAAAA,OAAO,EAAE;AAJb,CADgB,EAOhB;AACIH,EAAAA,EAAE,EAAE,IADR;AAEIC,EAAAA,KAAK,EAAE,WAFX;AAGIC,EAAAA,WAAW,EAAE,qBAHjB;AAIIC,EAAAA,OAAO,EAAE;AAJb,CAPgB,CAApB;;AAeA,MAAMC,UAAU,GAAG,MAAM;AAAA;;AACrB,QAAMC,MAAM,GAAGZ,SAAS,GAAGY,MAA3B;AACA,QAAMC,cAAc,GAAGP,WAAW,CAACQ,IAAZ,CAAiBC,CAAC,IAAIA,CAAC,CAACR,EAAF,KAASK,MAA/B,CAAvB;AAEA,QAAM,CAACI,SAAD,EAAYC,YAAZ,IAA4BZ,OAAO,CAAC;AACtCG,IAAAA,KAAK,EAAE;AACHU,MAAAA,KAAK,EAAEL,cAAc,CAACL,KADnB;AAEHW,MAAAA,OAAO,EAAE;AAFN,KAD+B;AAKtCV,IAAAA,WAAW,EAAE;AACTS,MAAAA,KAAK,EAAEL,cAAc,CAACJ,WADb;AAETU,MAAAA,OAAO,EAAE;AAFA;AALyB,GAAD,EAStC,IATsC,CAAzC;;AAWA,MAAI,CAACN,cAAL,EAAqB;AACjB,wBACI;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA,6BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAKH;;AAED,sBACI;AAAM,IAAA,SAAS,EAAC,WAAhB;AAAA,4BACI,QAAC,KAAD;AACI,MAAA,EAAE,EAAC,OADP;AAEI,MAAA,OAAO,EAAC,OAFZ;AAGI,MAAA,IAAI,EAAC,MAHT;AAII,MAAA,KAAK,EAAC,OAJV;AAKI,MAAA,UAAU,EAAE,CAACV,iBAAiB,EAAlB,CALhB;AAMI,MAAA,SAAS,EAAC,6BANd;AAOI,MAAA,OAAO,EAAE,MAAM,CACd,CARL;AASI,MAAA,KAAK,EAAEU,cAAc,CAACL,KAT1B;AAUI,MAAA,KAAK,EAAE;AAVX;AAAA;AAAA;AAAA;AAAA,YADJ,eAaI,QAAC,KAAD;AACI,MAAA,EAAE,EAAC,aADP;AAEI,MAAA,OAAO,EAAC,UAFZ;AAGI,MAAA,KAAK,EAAC,aAHV;AAII,MAAA,UAAU,EAAE,CAACJ,mBAAmB,CAAC,EAAD,CAApB,CAJhB;AAKI,MAAA,SAAS,EAAC,wDALd;AAMI,MAAA,OAAO,EAAE,MAAM,CACd,CAPL;AAQI,MAAA,KAAK,EAAES,cAAc,CAACJ,WAR1B;AASI,MAAA,KAAK,EAAE;AATX;AAAA;AAAA;AAAA;AAAA,YAbJ,eAwBI,QAAC,MAAD;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,QAAQ,EAAE,IAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAxBJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AA8BH,CArDD;;GAAME,U;UACaX,S,EAGmBK,O;;;KAJhCM,U;AAuDN,eAAeA,UAAf","sourcesContent":["import React from 'react';\nimport {useParams} from 'react-router-dom';\n\nimport Input from '../../shared/components/FormElements/Input';\nimport Button from '../../shared/components/FormElements/Button';\nimport {\n    VALIDATOR_REQUIRE,\n    VALIDATOR_MINLENGTH\n} from '../../shared/util/validators';\nimport {useForm} from '../../shared/hooks/form-hook';\nimport './TaskForm.css';\n\nconst DUMMY_TASKS = [\n    {\n        id: 't1',\n        title: 'new bug 1',\n        description: 'new bug 1 new bug 1',\n        creator: 'u1'\n    },\n    {\n        id: 't2',\n        title: 'new bug 2',\n        description: 'new bug 2 new bug 2',\n        creator: 'u2'\n    },\n];\n\nconst UpdateTask = () => {\n    const taskId = useParams().taskId;\n    const identifiedTask = DUMMY_TASKS.find(t => t.id === taskId);\n\n    const [formState, inputHandler] = useForm({\n        title: {\n            value: identifiedTask.title,\n            isValid: true\n        },\n        description: {\n            value: identifiedTask.description,\n            isValid: true\n        }\n    }, true);\n\n    if (!identifiedTask) {\n        return (\n            <div className=\"center\">\n                <h2>task not found!</h2>\n            </div>\n        );\n    }\n\n    return (\n        <form className=\"task-form\">\n            <Input\n                id=\"title\"\n                element=\"input\"\n                type=\"text\"\n                label=\"Title\"\n                validators={[VALIDATOR_REQUIRE()]}\n                errorText=\"Please enter a valid title.\"\n                onInput={() => {\n                }}\n                value={identifiedTask.title}\n                valid={true}\n            />\n            <Input\n                id=\"description\"\n                element=\"textarea\"\n                label=\"Description\"\n                validators={[VALIDATOR_MINLENGTH(10)]}\n                errorText=\"Please enter a valid description (min. 10 characters).\"\n                onInput={() => {\n                }}\n                value={identifiedTask.description}\n                valid={true}\n            />\n            <Button type=\"submit\" disabled={true}>\n                Update task\n            </Button>\n        </form>\n    );\n};\n\nexport default UpdateTask;\n"]},"metadata":{},"sourceType":"module"}