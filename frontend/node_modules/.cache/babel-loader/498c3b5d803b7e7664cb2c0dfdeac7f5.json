{"ast":null,"code":"var _jsxFileName = \"/home/alex/Music/task-management-app/frontend/src/tasks/pages/UpdateTask.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useParams } from 'react-router-dom';\nimport Input from '../../shared/components/FormElements/Input';\nimport Button from '../../shared/components/FormElements/Button';\nimport { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH } from '../../shared/util/validators';\nimport { useForm } from '../../shared/hooks/form-hook';\nimport './TaskForm.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DUMMY_TASKS = [{\n  id: 't1',\n  title: 'new bug 1',\n  description: 'new bug 1 new bug 1',\n  creator: 'u1'\n}, {\n  id: 't2',\n  title: 'new bug 2',\n  description: 'new bug 2 new bug 2',\n  creator: 'u2'\n}];\n\nconst UpdateTask = () => {\n  _s();\n\n  const taskId = useParams().taskId;\n  const [formState, inputHandler] = useForm({\n    title: {\n      value: '',\n      isValid: false\n    },\n    description: {\n      value: '',\n      isValid: false\n    }\n  }, false);\n  const identifiedTask = DUMMY_TASKS.find(t => t.id === taskId);\n\n  const taskUpdateSubmitHandler = event => {\n    event.preventDefault();\n    console.log(formState.inputs);\n  };\n\n  if (!identifiedTask) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"center\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"task not found!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"task-form\",\n    onSubmit: taskUpdateSubmitHandler,\n    children: [/*#__PURE__*/_jsxDEV(Input, {\n      id: \"title\",\n      element: \"input\",\n      type: \"text\",\n      label: \"Title\",\n      validators: [VALIDATOR_REQUIRE()],\n      errorText: \"Please enter a valid title.\",\n      onInput: inputHandler,\n      initialValue: formState.inputs.title.value,\n      initialValid: formState.inputs.title.isValid\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Input, {\n      id: \"description\",\n      element: \"textarea\",\n      label: \"Description\",\n      validators: [VALIDATOR_MINLENGTH(10)],\n      errorText: \"Please enter a valid description (min. 10 characters).\",\n      onInput: inputHandler,\n      initialValue: formState.inputs.description.value,\n      initialValid: formState.inputs.description.isValid\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      type: \"submit\",\n      disabled: !formState.isValid,\n      children: \"Update task\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n};\n\n_s(UpdateTask, \"UT27uF8pXIw/f+PAdn/t1qruH8Q=\", false, function () {\n  return [useParams, useForm];\n});\n\n_c = UpdateTask;\nexport default UpdateTask;\n\nvar _c;\n\n$RefreshReg$(_c, \"UpdateTask\");","map":{"version":3,"sources":["/home/alex/Music/task-management-app/frontend/src/tasks/pages/UpdateTask.js"],"names":["React","useParams","Input","Button","VALIDATOR_REQUIRE","VALIDATOR_MINLENGTH","useForm","DUMMY_TASKS","id","title","description","creator","UpdateTask","taskId","formState","inputHandler","value","isValid","identifiedTask","find","t","taskUpdateSubmitHandler","event","preventDefault","console","log","inputs"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {useParams} from 'react-router-dom';\n\nimport Input from '../../shared/components/FormElements/Input';\nimport Button from '../../shared/components/FormElements/Button';\nimport {\n    VALIDATOR_REQUIRE,\n    VALIDATOR_MINLENGTH\n} from '../../shared/util/validators';\nimport {useForm} from '../../shared/hooks/form-hook';\nimport './TaskForm.css';\n\nconst DUMMY_TASKS = [\n    {\n        id: 't1',\n        title: 'new bug 1',\n        description: 'new bug 1 new bug 1',\n        creator: 'u1'\n    },\n    {\n        id: 't2',\n        title: 'new bug 2',\n        description: 'new bug 2 new bug 2',\n        creator: 'u2'\n    },\n];\n\nconst UpdateTask = () => {\n    const taskId = useParams().taskId;\n\n    const [formState, inputHandler] = useForm({\n        title: {\n            value: '',\n            isValid: false\n        },\n        description: {\n            value: '',\n            isValid: false\n        }\n    }, false);\n\n    const identifiedTask = DUMMY_TASKS.find(t => t.id === taskId);\n\n    const taskUpdateSubmitHandler = event => {\n        event.preventDefault();\n        console.log(formState.inputs);\n    }\n\n    if (!identifiedTask) {\n        return (\n            <div className=\"center\">\n                <h2>task not found!</h2>\n            </div>\n        );\n    }\n\n    return (\n        <form className=\"task-form\" onSubmit={taskUpdateSubmitHandler}>\n            <Input\n                id=\"title\"\n                element=\"input\"\n                type=\"text\"\n                label=\"Title\"\n                validators={[VALIDATOR_REQUIRE()]}\n                errorText=\"Please enter a valid title.\"\n                onInput={inputHandler}\n                initialValue={formState.inputs.title.value}\n                initialValid={formState.inputs.title.isValid}\n            />\n            <Input\n                id=\"description\"\n                element=\"textarea\"\n                label=\"Description\"\n                validators={[VALIDATOR_MINLENGTH(10)]}\n                errorText=\"Please enter a valid description (min. 10 characters).\"\n                onInput={inputHandler}\n                initialValue={formState.inputs.description.value}\n                initialValid={formState.inputs.description.isValid}\n            />\n            <Button type=\"submit\" disabled={!formState.isValid}>\n                Update task\n            </Button>\n        </form>\n    );\n};\n\nexport default UpdateTask;\n"]},"metadata":{},"sourceType":"module"}