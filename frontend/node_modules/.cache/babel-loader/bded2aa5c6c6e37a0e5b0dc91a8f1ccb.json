{"ast":null,"code":"var _jsxFileName = \"/home/alex/Music/task-management-app/frontend/src/tasks/pages/NewTask.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport Input from \"../../shared/components/FormElements/Input\";\nimport { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH } from '../../shared/util/validators';\nimport Button from '../../shared/components/FormElements/Button';\nimport './TaskForm.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NewTask = () => {\n  _s();\n\n  const [formState, dispatch] = useReducer(formReducer, {\n    inputs: {\n      title: {\n        value: '',\n        isValid: false\n      },\n      description: {\n        value: '',\n        isValid: false\n      }\n    },\n    isValid: false\n  });\n  const inputHandler = useCallback((id, value, isValid) => {\n    dispatch({\n      type: 'INPUT_CHANGE',\n      value: value,\n      isValid: isValid,\n      inputId: id\n    });\n  }, []);\n\n  const taskSubmitHandler = event => {\n    event.preventDefault();\n    console.log(formState.inputs); // send this to the backend!\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"task-form\",\n    onSubmit: taskSubmitHandler,\n    children: [/*#__PURE__*/_jsxDEV(Input, {\n      id: \"title\",\n      element: \"input\",\n      type: \"text\",\n      label: \"Title\",\n      validators: [VALIDATOR_REQUIRE()],\n      errorText: \"Please enter a valid title.\",\n      onInput: inputHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Input, {\n      id: \"description\",\n      element: \"textarea\",\n      type: \"text\",\n      label: \"Description\",\n      validators: [VALIDATOR_MINLENGTH(10)],\n      errorText: \"Please enter a valid description at least 10 characters.\",\n      onInput: inputHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      type: \"submit\",\n      disabled: !formState.isValid,\n      children: \"Add task\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n};\n\n_s(NewTask, \"ndx+ExpiCD1WZLwVniMh3gzbfw4=\");\n\n_c = NewTask;\nexport default NewTask;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewTask\");","map":{"version":3,"sources":["/home/alex/Music/task-management-app/frontend/src/tasks/pages/NewTask.js"],"names":["React","Input","VALIDATOR_REQUIRE","VALIDATOR_MINLENGTH","Button","NewTask","formState","dispatch","useReducer","formReducer","inputs","title","value","isValid","description","inputHandler","useCallback","id","type","inputId","taskSubmitHandler","event","preventDefault","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,KAAP,MAAkB,4CAAlB;AACA,SAASC,iBAAT,EAA4BC,mBAA5B,QAAsD,8BAAtD;AACA,OAAOC,MAAP,MAAmB,6CAAnB;AACA,OAAO,gBAAP;;;AAGA,MAAMC,OAAO,GAAG,MAAM;AAAA;;AAClB,QAAM,CAACC,SAAD,EAAYC,QAAZ,IAAwBC,UAAU,CAACC,WAAD,EAAc;AAClDC,IAAAA,MAAM,EAAE;AACJC,MAAAA,KAAK,EAAE;AACHC,QAAAA,KAAK,EAAE,EADJ;AAEHC,QAAAA,OAAO,EAAE;AAFN,OADH;AAKJC,MAAAA,WAAW,EAAE;AACTF,QAAAA,KAAK,EAAE,EADE;AAETC,QAAAA,OAAO,EAAE;AAFA;AALT,KAD0C;AAWlDA,IAAAA,OAAO,EAAE;AAXyC,GAAd,CAAxC;AAcA,QAAME,YAAY,GAAGC,WAAW,CAAC,CAACC,EAAD,EAAKL,KAAL,EAAYC,OAAZ,KAAwB;AACrDN,IAAAA,QAAQ,CAAC;AACLW,MAAAA,IAAI,EAAE,cADD;AAELN,MAAAA,KAAK,EAAEA,KAFF;AAGLC,MAAAA,OAAO,EAAEA,OAHJ;AAILM,MAAAA,OAAO,EAAEF;AAJJ,KAAD,CAAR;AAMH,GAP+B,EAO7B,EAP6B,CAAhC;;AASA,QAAMG,iBAAiB,GAAGC,KAAK,IAAI;AAC/BA,IAAAA,KAAK,CAACC,cAAN;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYlB,SAAS,CAACI,MAAtB,EAF+B,CAEA;AAClC,GAHD;;AAIA,sBACI;AAAM,IAAA,SAAS,EAAC,WAAhB;AAA4B,IAAA,QAAQ,EAAEU,iBAAtC;AAAA,4BACI,QAAC,KAAD;AACI,MAAA,EAAE,EAAC,OADP;AAEI,MAAA,OAAO,EAAC,OAFZ;AAGI,MAAA,IAAI,EAAC,MAHT;AAII,MAAA,KAAK,EAAC,OAJV;AAKI,MAAA,UAAU,EAAE,CAAClB,iBAAiB,EAAlB,CALhB;AAMI,MAAA,SAAS,EAAC,6BANd;AAOI,MAAA,OAAO,EAAEa;AAPb;AAAA;AAAA;AAAA;AAAA,YADJ,eAUI,QAAC,KAAD;AACI,MAAA,EAAE,EAAC,aADP;AAEI,MAAA,OAAO,EAAC,UAFZ;AAGI,MAAA,IAAI,EAAC,MAHT;AAII,MAAA,KAAK,EAAC,aAJV;AAKI,MAAA,UAAU,EAAE,CAACZ,mBAAmB,CAAC,EAAD,CAApB,CALhB;AAMI,MAAA,SAAS,EAAC,0DANd;AAOI,MAAA,OAAO,EAAEY;AAPb;AAAA;AAAA;AAAA;AAAA,YAVJ,eAmBI,QAAC,MAAD;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,QAAQ,EAAE,CAACT,SAAS,CAACO,OAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAnBJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAyBH,CArDD;;GAAMR,O;;KAAAA,O;AAuDN,eAAeA,OAAf","sourcesContent":["import React from 'react';\n\nimport Input from \"../../shared/components/FormElements/Input\";\nimport { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH} from '../../shared/util/validators';\nimport Button from '../../shared/components/FormElements/Button';\nimport './TaskForm.css';\n\n\nconst NewTask = () => {\n    const [formState, dispatch] = useReducer(formReducer, {\n        inputs: {\n            title: {\n                value: '',\n                isValid: false\n            },\n            description: {\n                value: '',\n                isValid: false\n            }\n        },\n        isValid: false\n    });\n\n    const inputHandler = useCallback((id, value, isValid) => {\n        dispatch({\n            type: 'INPUT_CHANGE',\n            value: value,\n            isValid: isValid,\n            inputId: id\n        });\n    }, []);\n\n    const taskSubmitHandler = event => {\n        event.preventDefault();\n        console.log(formState.inputs); // send this to the backend!\n    };\n    return (\n        <form className=\"task-form\" onSubmit={taskSubmitHandler}>\n            <Input\n                id=\"title\"\n                element=\"input\"\n                type=\"text\"\n                label=\"Title\"\n                validators={[VALIDATOR_REQUIRE()]}\n                errorText=\"Please enter a valid title.\"\n                onInput={inputHandler}\n            />\n            <Input\n                id=\"description\"\n                element=\"textarea\"\n                type=\"text\"\n                label=\"Description\"\n                validators={[VALIDATOR_MINLENGTH(10)]}\n                errorText=\"Please enter a valid description at least 10 characters.\"\n                onInput={inputHandler}\n            />\n            <Button type=\"submit\" disabled={!formState.isValid}>\n                Add task\n            </Button>\n        </form>\n    );\n};\n\nexport default NewTask;\n"]},"metadata":{},"sourceType":"module"}