{"ast":null,"code":"var _jsxFileName = \"/home/alex/Music/task-management-app/frontend/src/tasks/pages/UpdateTask.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport Input from '../../shared/components/FormElements/Input';\nimport Button from '../../shared/components/FormElements/Button';\nimport { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH } from '../../shared/util/validators';\nimport { useForm } from '../../shared/hooks/form-hook';\nimport './TaskForm.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DUMMY_TASKS = [{\n  id: 't1',\n  title: 'new bug 1',\n  description: 'new bug 1 new bug 1',\n  creator: 'u1'\n}, {\n  id: 't2',\n  title: 'new bug 2',\n  description: 'new bug 2 new bug 2',\n  creator: 'u2'\n}];\n\nconst UpdateTask = () => {\n  _s();\n\n  const taskId = useParams().taskId;\n  const [formState, inputHandler, setFormData] = useForm({\n    title: {\n      value: '',\n      isValid: false\n    },\n    description: {\n      value: '',\n      isValid: false\n    }\n  }, false);\n  const identifiedTask = DUMMY_TASKS.find(t => t.id === taskId);\n  useEffect(() => {\n    setFormData({\n      title: {\n        value: identifiedTask.title,\n        isValid: true\n      },\n      description: {\n        value: identifiedTask.description,\n        isValid: true\n      }\n    }, true);\n  }, [setFormData, identifiedTask]);\n\n  const taskUpdateSubmitHandler = event => {\n    event.preventDefault();\n    console.log(formState.inputs);\n  };\n\n  if (!identifiedTask) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"center\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"task not found!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this);\n  }\n\n  return (// the form is only rendered when the is valid title\n    formState.inputs.title.value && /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"task-form\",\n      onSubmit: taskUpdateSubmitHandler,\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        id: \"title\",\n        element: \"input\",\n        type: \"text\",\n        label: \"Title\",\n        validators: [VALIDATOR_REQUIRE()],\n        errorText: \"Please enter a valid title.\",\n        onInput: inputHandler,\n        initialValue: formState.inputs.title.value,\n        initialValid: formState.inputs.title.isValid\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        id: \"description\",\n        element: \"textarea\",\n        label: \"Description\",\n        validators: [VALIDATOR_MINLENGTH(10)],\n        errorText: \"Please enter a valid description (min. 10 characters).\",\n        onInput: inputHandler,\n        initialValue: formState.inputs.description.value,\n        initialValid: formState.inputs.description.isValid\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        disabled: !formState.isValid,\n        children: \"Update task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this)\n  );\n};\n\n_s(UpdateTask, \"gBolniKyZ5kyndr2HB68Ho4KJxo=\", false, function () {\n  return [useParams, useForm];\n});\n\n_c = UpdateTask;\nexport default UpdateTask;\n\nvar _c;\n\n$RefreshReg$(_c, \"UpdateTask\");","map":{"version":3,"sources":["/home/alex/Music/task-management-app/frontend/src/tasks/pages/UpdateTask.js"],"names":["React","useEffect","useParams","Input","Button","VALIDATOR_REQUIRE","VALIDATOR_MINLENGTH","useForm","DUMMY_TASKS","id","title","description","creator","UpdateTask","taskId","formState","inputHandler","setFormData","value","isValid","identifiedTask","find","t","taskUpdateSubmitHandler","event","preventDefault","console","log","inputs"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,SAAR,QAAwB,kBAAxB;AAEA,OAAOC,KAAP,MAAkB,4CAAlB;AACA,OAAOC,MAAP,MAAmB,6CAAnB;AACA,SACIC,iBADJ,EAEIC,mBAFJ,QAGO,8BAHP;AAIA,SAAQC,OAAR,QAAsB,8BAAtB;AACA,OAAO,gBAAP;;AAEA,MAAMC,WAAW,GAAG,CAChB;AACIC,EAAAA,EAAE,EAAE,IADR;AAEIC,EAAAA,KAAK,EAAE,WAFX;AAGIC,EAAAA,WAAW,EAAE,qBAHjB;AAIIC,EAAAA,OAAO,EAAE;AAJb,CADgB,EAOhB;AACIH,EAAAA,EAAE,EAAE,IADR;AAEIC,EAAAA,KAAK,EAAE,WAFX;AAGIC,EAAAA,WAAW,EAAE,qBAHjB;AAIIC,EAAAA,OAAO,EAAE;AAJb,CAPgB,CAApB;;AAeA,MAAMC,UAAU,GAAG,MAAM;AAAA;;AACrB,QAAMC,MAAM,GAAGZ,SAAS,GAAGY,MAA3B;AAEA,QAAM,CAACC,SAAD,EAAYC,YAAZ,EAA0BC,WAA1B,IAAyCV,OAAO,CAAC;AACnDG,IAAAA,KAAK,EAAE;AACHQ,MAAAA,KAAK,EAAE,EADJ;AAEHC,MAAAA,OAAO,EAAE;AAFN,KAD4C;AAKnDR,IAAAA,WAAW,EAAE;AACTO,MAAAA,KAAK,EAAE,EADE;AAETC,MAAAA,OAAO,EAAE;AAFA;AALsC,GAAD,EASnD,KATmD,CAAtD;AAWA,QAAMC,cAAc,GAAGZ,WAAW,CAACa,IAAZ,CAAiBC,CAAC,IAAIA,CAAC,CAACb,EAAF,KAASK,MAA/B,CAAvB;AAEAb,EAAAA,SAAS,CAAC,MAAM;AACZgB,IAAAA,WAAW,CAAC;AACRP,MAAAA,KAAK,EAAE;AACHQ,QAAAA,KAAK,EAAEE,cAAc,CAACV,KADnB;AAEHS,QAAAA,OAAO,EAAE;AAFN,OADC;AAKRR,MAAAA,WAAW,EAAE;AACTO,QAAAA,KAAK,EAAEE,cAAc,CAACT,WADb;AAETQ,QAAAA,OAAO,EAAE;AAFA;AALL,KAAD,EASR,IATQ,CAAX;AAWH,GAZQ,EAYN,CAACF,WAAD,EAAcG,cAAd,CAZM,CAAT;;AAcA,QAAMG,uBAAuB,GAAGC,KAAK,IAAI;AACrCA,IAAAA,KAAK,CAACC,cAAN;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYZ,SAAS,CAACa,MAAtB;AACH,GAHD;;AAKA,MAAI,CAACR,cAAL,EAAqB;AACjB,wBACI;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA,6BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAKH;;AAED,SACI;AACAL,IAAAA,SAAS,CAACa,MAAV,CAAiBlB,KAAjB,CAAuBQ,KAAvB,iBACI;AAAM,MAAA,SAAS,EAAC,WAAhB;AAA4B,MAAA,QAAQ,EAAEK,uBAAtC;AAAA,8BACI,QAAC,KAAD;AACI,QAAA,EAAE,EAAC,OADP;AAEI,QAAA,OAAO,EAAC,OAFZ;AAGI,QAAA,IAAI,EAAC,MAHT;AAII,QAAA,KAAK,EAAC,OAJV;AAKI,QAAA,UAAU,EAAE,CAAClB,iBAAiB,EAAlB,CALhB;AAMI,QAAA,SAAS,EAAC,6BANd;AAOI,QAAA,OAAO,EAAEW,YAPb;AAQI,QAAA,YAAY,EAAED,SAAS,CAACa,MAAV,CAAiBlB,KAAjB,CAAuBQ,KARzC;AASI,QAAA,YAAY,EAAEH,SAAS,CAACa,MAAV,CAAiBlB,KAAjB,CAAuBS;AATzC;AAAA;AAAA;AAAA;AAAA,cADJ,eAYI,QAAC,KAAD;AACI,QAAA,EAAE,EAAC,aADP;AAEI,QAAA,OAAO,EAAC,UAFZ;AAGI,QAAA,KAAK,EAAC,aAHV;AAII,QAAA,UAAU,EAAE,CAACb,mBAAmB,CAAC,EAAD,CAApB,CAJhB;AAKI,QAAA,SAAS,EAAC,wDALd;AAMI,QAAA,OAAO,EAAEU,YANb;AAOI,QAAA,YAAY,EAAED,SAAS,CAACa,MAAV,CAAiBjB,WAAjB,CAA6BO,KAP/C;AAQI,QAAA,YAAY,EAAEH,SAAS,CAACa,MAAV,CAAiBjB,WAAjB,CAA6BQ;AAR/C;AAAA;AAAA;AAAA;AAAA,cAZJ,eAsBI,QAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,QAAQ,EAAE,CAACJ,SAAS,CAACI,OAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAtBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAHR;AA+BH,CA1ED;;GAAMN,U;UACaX,S,EAEgCK,O;;;KAH7CM,U;AA4EN,eAAeA,UAAf","sourcesContent":["import React, {useEffect} from 'react';\nimport {useParams} from 'react-router-dom';\n\nimport Input from '../../shared/components/FormElements/Input';\nimport Button from '../../shared/components/FormElements/Button';\nimport {\n    VALIDATOR_REQUIRE,\n    VALIDATOR_MINLENGTH\n} from '../../shared/util/validators';\nimport {useForm} from '../../shared/hooks/form-hook';\nimport './TaskForm.css';\n\nconst DUMMY_TASKS = [\n    {\n        id: 't1',\n        title: 'new bug 1',\n        description: 'new bug 1 new bug 1',\n        creator: 'u1'\n    },\n    {\n        id: 't2',\n        title: 'new bug 2',\n        description: 'new bug 2 new bug 2',\n        creator: 'u2'\n    },\n];\n\nconst UpdateTask = () => {\n    const taskId = useParams().taskId;\n\n    const [formState, inputHandler, setFormData] = useForm({\n        title: {\n            value: '',\n            isValid: false\n        },\n        description: {\n            value: '',\n            isValid: false\n        }\n    }, false);\n\n    const identifiedTask = DUMMY_TASKS.find(t => t.id === taskId);\n\n    useEffect(() => {\n        setFormData({\n            title: {\n                value: identifiedTask.title,\n                isValid: true\n            },\n            description: {\n                value: identifiedTask.description,\n                isValid: true\n            }\n        }, true);\n\n    }, [setFormData, identifiedTask]);\n\n    const taskUpdateSubmitHandler = event => {\n        event.preventDefault();\n        console.log(formState.inputs);\n    }\n\n    if (!identifiedTask) {\n        return (\n            <div className=\"center\">\n                <h2>task not found!</h2>\n            </div>\n        );\n    }\n\n    return (\n        // the form is only rendered when the is valid title\n        formState.inputs.title.value && (\n            <form className=\"task-form\" onSubmit={taskUpdateSubmitHandler}>\n                <Input\n                    id=\"title\"\n                    element=\"input\"\n                    type=\"text\"\n                    label=\"Title\"\n                    validators={[VALIDATOR_REQUIRE()]}\n                    errorText=\"Please enter a valid title.\"\n                    onInput={inputHandler}\n                    initialValue={formState.inputs.title.value}\n                    initialValid={formState.inputs.title.isValid}\n                />\n                <Input\n                    id=\"description\"\n                    element=\"textarea\"\n                    label=\"Description\"\n                    validators={[VALIDATOR_MINLENGTH(10)]}\n                    errorText=\"Please enter a valid description (min. 10 characters).\"\n                    onInput={inputHandler}\n                    initialValue={formState.inputs.description.value}\n                    initialValid={formState.inputs.description.isValid}\n                />\n                <Button type=\"submit\" disabled={!formState.isValid}>\n                    Update task\n                </Button>\n            </form>\n        )\n    );\n};\n\nexport default UpdateTask;\n"]},"metadata":{},"sourceType":"module"}